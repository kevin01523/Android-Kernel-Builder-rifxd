name: Android Kernel Build (AOSP Tools, Official Clang, Sunfish)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on \
            libncursesw6 \
            python3 \
            python3-venv \
            rsync \
            unzip \
            wget \
            zip \
            zstd \
            gcc-aarch64-linux-gnu \
            gcc-arm-linux-gnueabi \
            binutils-arm-linux-gnueabihf \
            lftp \
            ftp \
            pigz \
            device-tree-compiler \
            llvm \
            # Added missing packages:
            ccache \
            dwarves \
            clang \
            lld \
            llvm-dev

      - name: Download AOSP toolchains (Android 13)
        run: |
          set -e
          mkdir -p aosp-tools
          cd aosp-tools

          echo "Downloading AOSP GCC 4.9 for aandroid-4.9.tar.gz
          echo "Extracting aarch64 GCC..."
          mkdir aarch64-linux-android-4.9
          tar -xzf aarch64-linux-android-4.9.tar.gz -C aarch64-linux-android-4.9

          echo "Downloading AOSP GCC 4.9 for arm (commit b0c6a654327ca8796bed1e61dffcf523d04dceaa)..."
          wget -q https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/b0c6a654327ca8796bed1e61dffcf523d04dceaa.tar.gz -O arm-linux-androideabi-4.9.tar.gz
          echo "Extracting arm GCC..."
          mkdir arm-linux-androideabi-4.9
          tar -xzf arm-linux-androideabi-4.9.tar.gz -C arm-linux-androideabi-4.9

          echo "Toolchain downloads fallocate -l 4G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          free -h

      - name: Download and set up Neutron Clang (Antman)
        run: |
          mkdir -p toolchains/neutron-clang
          cd toolchains/neutron-clang
          curl glibc using Neutron Clang
        run: |
          patch_glibc() {
            echo "Patching glibc using Neutron Clang..."
            cd "${PWD}/toolchains/neutron-clang"
            ./antman --patch=glibc
            if [[ $? -ne 0 ]]; then
              echo "Failed to patch glibc"
              exit 1
            fi
            cd "${PWD}"
            echo "glibc patched successfully"
          }
          patch_glibc

      - name: Export Neutron Clang to PATH
        run: |
          echo "${PWD}/toolchains/neutron-clang/bin" >> $GITHUB_PATH

      - name: Build Kernel
        run: |
          set -e
          rm -rf out

          if [ ! -d kernel ]; then
            git clone --depth=1 --branch android-msm-sunfish-4.14-android13-qpr3 https://android.googlesource.com/kernel/msm kernel
          fi

          cd kernel

          export ARCH=arm64
          export CC=clang
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          export LLVM=1
          export LLVM_IAS=1

          config_path="sunfish_defconfig"
          make -j$(nproc) ARCH=$ARCH CC=$CC CROSS_COMPILE=$CROSS_COMPILE CROSS_COMPILE_ARM32=$CROSS_COMPILE_ARM32 LLVM=$LLVM LLVM_IAS=$LLVM_IAS "$config_path" O=out
          echo "Compilation started..."
          # Workaround for vdso32: force using GNU as for ARM32 by disabling LLVM_IAS for this make call if error persists
          make -j$(nproc) ARCH=$ARCH CC=$CC CROSS_COMPILE=$CROSS_COMPILE CROSS_COMPILE_ARM32=$CROSS_COMPILE_ARM32 LLVM=$LLVM O=out

          cd ..

      - name: Clone AnyKernel3
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git

      - name: Copy kernel Image to AnyKernel3
        run: |
          cp out/arch/arm64/boot/Image AnyKernel3/

      - name: Create AnyKernel3 flashable zip
        run: |
          cd AnyKernel3
          zip -r9 ../AnyKernel3-flashable.zip ./*
          cd ..

      - name: Upload AnyKernel3 flashable zip
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3-flashable
          path: AnyKernel3-flashable.zip

      - name: Upload kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: out/arch/arm64/boot/Image