name: Android Kernel Build (Android Official Clang Only, LLVMgold.so Fix)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (glibc, cross-compilers, etc)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl git zip ftp \
            gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libc6-dev lftp zstd wget \
            libfl-dev python3 libarchive-tools llvm-14-linker-tools unzip

      - name: Download and extract Android Clang toolchain (official)
        run: |
          ANDROID_CLANG_URL="https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/tags/android-13.0.0_r13/clang-r450784d.tar.gz"
          if [ ! -d "./clang-android-r450784d/bin" ]; then
            mkdir -p clang-android-r450784d
            wget -q -O clang-android-r450784d.tar.gz "$ANDROID_CLANG_URL"
            tar -xzf clang-android-r450784d.tar.gz -C clang-android-r450784d
          fi

      - name: Install llvm-gold plugin and link LLVMgold.so
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-14
          LLVMGOLD=$(find /usr -name LLVMgold.so | head -n1)
          if [ -n "$LLVMGOLD" ]; then
            mkdir -p clang-android-r450784d/lib
            ln -sf "$LLVMGOLD" clang-android-r450784d/lib/LLVMgold.so
            echo "Symlinked $LLVMGOLD to clang-android-r450784d/lib/LLVMgold.so"
          else
            echo "LLVMgold.so not found in llvm-14 package"
          fi
          echo "LD_LIBRARY_PATH=$(pwd)/clang-android-r450784d/lib:\$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Print glibc version
        run: |
          ldd --version | head -n1
          dpkg -l libc6

      - name: Build Kernel
        run: |
          export LD_LIBRARY_PATH=$(pwd)/clang-android-r450784d/lib:$LD_LIBRARY_PATH
          export CLANG_BIN=$(pwd)/clang-android-r450784d/bin
          export ARCH=arm64
          export SUBARCH=arm64
          export CC=$CLANG_BIN/clang
          export PATH=$CLANG_BIN:$PATH

          if [ ! -d kernel ]; then
            git clone --depth=1 --branch android-msm-sunfish-4.14-android13-qpr3 https://android.googlesource.com/kernel/msm kernel
          fi

          cd kernel
          make -j$(nproc) ARCH=arm64 CC=clang CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- LLVM=1 LLVM_IAS=1 sunfish_defconfig O=../out

          echo "Compilation started..."
          make -j$(nproc) ARCH=arm64 CC=clang CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- LLVM=1 LLVM_IAS=1 O=../out

          cd ..

      - name: Clone AnyKernel3
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git

      - name: Copy kernel Image to AnyKernel3
        run: |
          cp out/arch/arm64/boot/Image AnyKernel3/

      - name: Create AnyKernel3 flashable zip
        run: |
          cd AnyKernel3
          zip -r9 ../AnyKernel3-flashable.zip ./*
          cd ..

      - name: Upload AnyKernel3 flashable zip
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3-flashable
          path: AnyKernel3-flashable.zip

      - name: Upload kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: out/arch/arm64/boot/Image