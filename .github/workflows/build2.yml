name: Android Kernel Build (AOSP Tools, Official Clang, Sunfish)

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            bc \
            bison \
            curl \
            ca-certificates \
            cpio \
            flex \
            git \
            zip \
            lz4 \
            libssl-dev \
            libtfm-dev \
            libfl-dev \
            libncurses-dev \
            libncurses6 \
            libncursesw6 \
            python3 \
            python3-venv \
            libarchive-tools \
            rsync \
            unzip \
            wget \
            zstd \
            binutils-arm-linux-gnueabihf \
            gcc-aarch64-linux-gnu \
            gcc-arm-linux-gnueabi \
            device-tree-compiler \
            llvm \
            ccache \
            dwarves \
            lld \
            llvm-dev \
            gnupg \
            gnutls-bin \
            gperf \
            imagemagick \
            libsdl1.2-dev \
            libxml2 \
            pngcrush \
            protobuf-compiler \
            python3-protobuf \
            schedtool \
            squashfs-tools \
            xsltproc \
            ftp \
            lftp \
            clang

      - name: Add swap space
        run: |
          sudo fallocate -l 4G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          free -h

      - name: Download and set up Neutron Clang (Antman)
        run: |
          mkdir -p toolchains/neutron-clang
          cd toolchains/neutron-clang
          curl -LO "https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman"
          chmod +x antman
          ./antman -S=11032023
          cd ../..

      - name: Patch glibc using Neutron Clang
        run: |
          cd toolchains/neutron-clang
          ./antman --patch=glibc
          cd ../..

      - name: Clone kernel source
        run: |
          git clone --depth=1 --branch sunfishkernel2023 https://github.com/kevin01523/Sunfish_stock_ksu_next kernel

      - name: Set up git identity for cherry-pick
        run: |
          cd kernel
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          cd ..

      - name: Cherry-pick proton_zf6 commit 68acd6966ac98c4610813cec759afb33015d2329
        run: |
          cd kernel
          git remote add proton_zf6 https://github.com/kdrag0n/proton_zf6.git
          git fetch proton_zf6 68acd6966ac98c4610813cec759afb33015d2329
          git cherry-pick 68acd6966ac98c4610813cec759afb33015d2329
          cd ..

      - name: Build Kernel
        run: |
          set -e
          export PATH="$(pwd)/toolchains/neutron-clang/bin:$PATH"
          rm -rf kernel/out
          cd kernel
          # Remove -Werror from all Makefiles before building (currently commented out)
          # find . -type f -name 'Makefile*' -exec sed -i 's/-Werror//g' {} +
          export ARCH=arm64
          export SUBARCH=arm64
          export LD=ld.lld
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          config_path="sunfish_defconfig"
          make -j$(nproc) ARCH=$ARCH SUBARCH=$SUBARCH CC=clang \
            CROSS_COMPILE=$CROSS_COMPILE \
            CROSS_COMPILE_ARM32=$CROSS_COMPILE_ARM32 "$config_path" O=out
          echo "Compilation started..."
          make -j$(nproc) ARCH=$ARCH SUBARCH=$SUBARCH CC=clang \
            CROSS_COMPILE=$CROSS_COMPILE \
            CROSS_COMPILE_ARM32=$CROSS_COMPILE_ARM32 O=out
          cd ..

      - name: Clone AnyKernel3
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git

      - name: Copy kernel Image to AnyKernel3
        run: |
          cp kernel/out/arch/arm64/boot/Image AnyKernel3/

      - name: Create AnyKernel3 flashable zip
        run: |
          cd AnyKernel3
          zip -r9 ../AnyKernel3-flashable.zip ./*
          cd ..

      - name: Upload AnyKernel3 flashable zip
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3-flashable
          path: AnyKernel3-flashable.zip

      - name: Upload kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: kernel/out/arch/arm64/boot/Image