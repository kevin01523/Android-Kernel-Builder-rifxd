name: Build Android Kernel (LineageOS GCC Toolchains)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout your repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl git zip ftp gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev lftp zstd wget libfl-dev python3 libarchive-tools llvm-14-linker-tools unzip

      - name: Download and extract AARCH64 GCC toolchain
        run: |
          AARCH64_GCC_HASH=5e030eafe024784a73cdf47e6936ac0dbfc763dc
          AARCH64_GCC_URL=https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9/archive/${AARCH64_GCC_HASH}.zip
          mkdir -p toolchains/aarch64
          wget -O aarch64-gcc.zip "$AARCH64_GCC_URL"
          unzip -q aarch64-gcc.zip -d toolchains/aarch64
          # Symlink for convenience
          ln -s $(find toolchains/aarch64 -type d -name 'bin') toolchains/aarch64/bin

      - name: Download and extract ARM GCC toolchain
        run: |
          ARM_GCC_HASH=111258a10e017f067b27e6cfcea7619d753f3309
          ARM_GCC_URL=https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9/archive/${ARM_GCC_HASH}.zip
          mkdir -p toolchains/arm
          wget -O arm-gcc.zip "$ARM_GCC_URL"
          unzip -q arm-gcc.zip -d toolchains/arm
          # Symlink for convenience
          ln -s $(find toolchains/arm -type d -name 'bin') toolchains/arm/bin

      - name: Clone and Build Kernel
        run: |
          # Find the actual bin directories created by the extraction
          export AARCH64_BIN=$(find $(pwd)/toolchains/aarch64 -type d -name 'bin' | head -n1)
          export ARM_BIN=$(find $(pwd)/toolchains/arm -type d -name 'bin' | head -n1)
          export ARCH=arm64
          export SUBARCH=arm64
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export CROSS_COMPILE=${AARCH64_BIN}/aarch64-linux-android-
          export CROSS_COMPILE_ARM32=${ARM_BIN}/arm-linux-androideabi-
          export CC=clang
          export PATH=${AARCH64_BIN}:${ARM_BIN}:/usr/bin:$PATH

          echo "AARCH64_BIN: $AARCH64_BIN"
          echo "ARM_BIN: $ARM_BIN"
          echo "Listing aarch64 toolchain binaries:"
          ls -l $AARCH64_BIN
          echo "Listing arm toolchain binaries:"
          ls -l $ARM_BIN

          if [ ! -d kernel ]; then
            git clone --depth=1 --branch android-msm-sunfish-4.14-android13-qpr3 https://android.googlesource.com/kernel/msm kernel
          fi

          ls -l
          if [ ! -d kernel ]; then
            echo "ERROR: kernel directory does not exist!"
            exit 1
          fi

          cd kernel
          echo "Current directory: $(pwd)"
          which make
          make --version
          make O=../out ARCH=arm64 sunfish_defconfig
          make -j$(nproc) O=../out ARCH=arm64 \
            CC=clang \
            CROSS_COMPILE=${CROSS_COMPILE} \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE_ARM32=${CROSS_COMPILE_ARM32} \
            LLVM=1
          cd ..

      - name: Clone AnyKernel3
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git

      - name: Copy kernel Image to AnyKernel3
        run: |
          cp out/arch/arm64/boot/Image AnyKernel3/

      - name: Create AnyKernel3 flashable zip
        run: |
          cd AnyKernel3
          zip -r9 ../AnyKernel3-flashable.zip ./*
          cd ..

      - name: Upload AnyKernel3 flashable zip
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3-flashable
          path: AnyKernel3-flashable.zip

      - name: Upload kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: out/arch/arm64/boot/Image