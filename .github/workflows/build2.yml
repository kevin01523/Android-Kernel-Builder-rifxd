name: Build Android Kernel (Default Android Toolchains)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout your repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            make \
            build-essential \
            bc \
            bison \
            flex \
            libssl-dev \
            libncurses5-dev \
            ccache \
            dwarves \
            libelf-dev \
            git \
            wget \
            curl \
            python3 \
            zip

      - name: Download Android default Clang and GCC toolchains
        run: |
          mkdir -p /home/runner/toolchains/clang
          wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/tags/android-13.0.0_r13/clang-r450784d.tar.gz -O clang.tar.gz
          tar -xzf clang.tar.gz -C /home/runner/toolchains/clang --strip-components=1
          mkdir -p /home/runner/toolchains/gcc
          wget https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/heads/master.tar.gz -O gcc.tar.gz
          tar -xzf gcc.tar.gz -C /home/runner/toolchains/gcc --strip-components=1
          echo "Toolchain directories:"
          ls -l /home/runner/toolchains/clang/bin || true
          ls -l /home/runner/toolchains/gcc/bin || true

      - name: Clone and Build Kernel
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export CROSS_COMPILE=/home/runner/toolchains/gcc/bin/aarch64-linux-android-
          export CC=/home/runner/toolchains/clang/bin/clang
          export PATH=/home/runner/toolchains/clang/bin:/home/runner/toolchains/gcc/bin:$PATH

          # Clone kernel source if not already present
          if [ ! -d kernel ]; then
            git clone --depth=1 --branch android-msm-sunfish-4.14-android13-qpr3 https://android.googlesource.com/kernel/msm kernel
          fi

          echo "Verifying build tools..."
          command -v make || { echo "make not found!"; exit 127; }
          command -v clang || { echo "clang not found!"; exit 127; }
          command -v aarch64-linux-android-gcc || { echo "gcc not found!"; exit 127; }
          command -v git || { echo "git not found!"; exit 127; }

          ls -l
          if [ ! -d kernel ]; then
            echo "ERROR: kernel directory does not exist!"
            exit 1
          fi

          cd kernel
          echo "Current directory: $(pwd)"
          which make
          make --version
          make O=../out ARCH=arm64 sunfish_defconfig
          make -j$(nproc) O=../out ARCH=arm64 \
            CC=clang \
            CROSS_COMPILE=aarch64-linux-android- \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            LLVM=1
          cd ..

      - name: Clone AnyKernel3
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git

      - name: Copy kernel Image to AnyKernel3
        run: |
          cp out/arch/arm64/boot/Image AnyKernel3/

      - name: Create AnyKernel3 flashable zip
        run: |
          cd AnyKernel3
          zip -r9 ../AnyKernel3-flashable.zip ./*
          cd ..

      - name: Upload AnyKernel3 flashable zip
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3-flashable
          path: AnyKernel3-flashable.zip

      - name: Upload kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: out/arch/arm64/boot/Image