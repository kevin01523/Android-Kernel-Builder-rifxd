name: Android Kernel Build (AOSP Tools, Official Clang, Sunfish)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            bc \
            bison \
            curl \
            ca-certificates \
            cpio \
            flex \
            git \
            lz4 \
            libarchive-tools \
            libelf-dev \
            libssl-dev \
            libtfm-dev \
            libfl-dev \
            libncurses-dev \
            libncurses6 \
            libncursesw6 \
            python3 \
            python3-venv \
            rsync \
            unzip \
            wget \
            zip \
            zstd \
            gcc-aarch64-linux-gnu \
            gcc-arm-linux-gnueabi \
            binutils-arm-linux-gnueabihf \
            lftp \
            ftp \
            pigz \
            device-tree-compiler

      - name: Download AOSP toolchains (Android 13)
        run: |
          set -e
          mkdir -p aosp-tools
          cd aosp-tools

          echo "Downloading official Android 13 clang (r450784d, android13-qpr3-s9-release)..."
          wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android13-qpr3-s9-release/clang-r450784d.tar.gz
          echo "Extracting clang..."
          mkdir clang-r450784d
          tar -xzf clang-r450784d.tar.gz -C clang-r450784d

          echo "Downloading AOSP GCC 4.9 for aarch64 (commit 606f80986096476912e04e5c2913685a8f2c3b65)..."
          wget -q https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/606f80986096476912e04e5c2913685a8f2c3b65.tar.gz -O aarch64-linux-android-4.9.tar.gz
          echo "Extracting aarch64 GCC..."
          mkdir aarch64-linux-android-4.9
          tar -xzf aarch64-linux-android-4.9.tar.gz -C aarch64-linux-android-4.9

          echo "Downloading AOSP GCC 4.9 for arm (commit b0c6a654327ca8796bed1e61dffcf523d04dceaa)..."
          wget -q https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/b0c6a654327ca8796bed1e61dffcf523d04dceaa.tar.gz -O arm-linux-androideabi-4.9.tar.gz
          echo "Extracting arm GCC..."
          mkdir arm-linux-androideabi-4.9
          tar -xzf arm-linux-androideabi-4.9.tar.gz -C arm-linux-androideabi-4.9

          echo "Toolchain downloads and extraction complete."
          cd ..

      - name: Build Kernel
        run: |
          set -e
          rm -rf out

          # Set up toolchain and output directories
          export KERNEL_ROOT="${PWD}"
          export KERNEL_DIR="${KERNEL_ROOT}/aosp-tools"
          export OUT_DIR="${KERNEL_ROOT}/out"

          # Clang path (reference: CLANG_PATH)
          export CLANG_PATH="${KERNEL_DIR}/clang-r450784d/bin"
          export PATH="${CLANG_PATH}:${PATH}"

          # ARCH and SUBARCH
          export ARCH=arm64
          export SUBARCH=arm64

          # CLANG_TRIPLE (reference)
          export CLANG_TRIPLE="aarch64-linux-gnu-"
          
          # CROSS_COMPILE and CROSS_COMPILE_ARM32 (reference: use downloaded toolchains)
          export CROSS_COMPILE="${KERNEL_DIR}/aarch64-linux-android-4.9/bin/aarch64-linux-gnu-"
          export CROSS_COMPILE_ARM32="${KERNEL_DIR}/arm-linux-androideabi-4.9/bin/arm-linux-gnueabi-"

          # LD_LIBRARY_PATH
          export LD_LIBRARY_PATH="${KERNEL_DIR}/clang-r450784d/lib64:${LD_LIBRARY_PATH}"

          # Other required exports
          export LD=ld.lld

          DEFCONFIG="sunfish_defconfig"

          # Clone kernel if needed
          if [ ! -d kernel ]; then
            git clone --depth=1 --branch android-msm-sunfish-4.14-android13-qpr3 https://android.googlesource.com/kernel/msm kernel
          fi

          cd kernel

          # Defconfig step
          make O=${OUT_DIR} \
            CC=clang \
            ARCH=${ARCH} \
            SUBARCH=${SUBARCH} \
            CROSS_COMPILE=${CROSS_COMPILE} \
            CROSS_COMPILE_ARM32=${CROSS_COMPILE_ARM32} \
            LLVM=1 \
            LLVM_IAS=1 \
            ${DEFCONFIG}

          # Build step
          make O=${OUT_DIR} \
            CC=clang \
            ARCH=${ARCH} \
            SUBARCH=${SUBARCH} \
            CROSS_COMPILE=${CROSS_COMPILE} \
            CROSS_COMPILE_ARM32=${CROSS_COMPILE_ARM32} \
            LLVM=1 \
            LLVM_IAS=1 \
            LD=${LD} \
            NM=llvm-nm \
            OBJCOPY=llvm-objcopy

          cd ..

      - name: Clone AnyKernel3
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git

      - name: Copy kernel Image to AnyKernel3
        run: |
          cp out/arch/arm64/boot/Image AnyKernel3/

      - name: Create AnyKernel3 flashable zip
        run: |
          cd AnyKernel3
          zip -r9 ../AnyKernel3-flashable.zip ./*
          cd ..

      - name: Upload AnyKernel3 flashable zip
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3-flashable
          path: AnyKernel3-flashable.zip

      - name: Upload kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: out/arch/arm64/boot/Image