name: Android Kernel Build (clang-crDroid, Sunfish)

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            bc \
            bison \
            curl \
            ca-certificates \
            cpio \
            flex \
            git \
            zip \
            lz4 \
            libssl-dev \
            libtfm-dev \
            libfl-dev \
            libncurses-dev \
            libncurses6 \
            libncursesw6 \
            python3 \
            python3-venv \
            libarchive-tools \
            rsync \
            unzip \
            wget \
            zstd \
            binutils-arm-linux-gnueabihf \
            gcc-aarch64-linux-gnu \
            gcc-arm-linux-gnueabi \
            device-tree-compiler \
            llvm \
            ccache \
            dwarves \
            lld \
            llvm-dev \
            gnupg \
            gnutls-bin \
            gperf \
            imagemagick \
            libsdl1.2-dev \
            libxml2 \
            pngcrush \
            protobuf-compiler \
            python3-protobuf \
            schedtool \
            squashfs-tools \
            xsltproc \
            ftp \
            lftp \
            clang \
            tar \
            gzip \
            bzip2 \
            rar \
            unrar \
            checkinstall \
            libncursesw5-dev \
            libsqlite3-dev \
            tk-dev \
            libgdbm-dev \
            libc6-dev \
            libbz2-dev \
            libffi-dev

      - name: Add swap space
        run: |
          sudo fallocate -l 4G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          free -h

      - name: Download clang-crDroid toolchain
        run: |
          mkdir -p toolchains/clang-crDroid
          git clone --depth=1 --branch 15.0 https://gitlab.com/crdroidandroid/android_prebuilts_clang_host_linux-x86_clang-r536225 toolchains/clang-crDroid

      - name: Download and extract wahoo-kernel-tools
        run: |
          mkdir -p toolchains
          wget -O /tmp/wahoo-kernel-tools.zip https://xdaforums.com/attachments/wahoo-kernel-tools-zip.4312566/
          unzip /tmp/wahoo-kernel-tools.zip -d toolchains

      - name: Clone kernel source
        run: |
          git clone --depth=1 --branch sunfishkernel2023 https://github.com/kevin01523/Sunfish_stock_ksu_next kernel

      - name: Set up git identity for cherry-pick
        run: |
          cd kernel
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          cd ..

      - name: Cherry-pick proton_zf6 commit 68acd6966ac98c4610813cec759afb33015d2329
        run: |
          cd kernel
          git remote add proton_zf6 https://github.com/kdrag0n/proton_zf6.git
          git fetch proton_zf6 68acd6966ac98c4610813cec759afb33015d2329
          git cherry-pick 68acd6966ac98c4610813cec759afb33015d2329
          cd ..

      - name: Build Kernel
        run: |
          set -e
          export PATH="$(pwd)/toolchains/clang-crDroid/bin:$(pwd)/toolchains/wahoo-kernel-tools/bin:$PATH"
          echo "PATH for build: $PATH"
          export ARCH=arm64
          export SUBARCH=arm64
          export CC=clang-crDroid/bin/clang
          #export LD="$GITHUB_WORKSPACE/toolchains/clang-crDroid/bin/ld.lld"
          echo "LD is set to: $LD"
          export LLVM=1
          export LLVM_IAS=1
          export CROSS_COMPILE=clang-crDroid/bin/aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=clang-crDroid/bin/arm-linux-gnueabi-
          export KBUILD_BUILD_HOST=pipewire
          export KBUILD_BUILD_USER=rainyxeon
          export AR=clang-crDroid/bin/llvm-ar
          export NM=clang-crDroid/bin/llvm-nm
          export OBJCOPY=clang-crDroid/bin/llvm-objcopy
          export OBJDUMP=clang-crDroid/bin/llvm-objdump
          export READELF=clang-crDroid/bin/llvm-readelf
          export OBJSIZE=clang-crDroid/bin/llvm-size
          export STRIP=clang-crDroid/bin/llvm-strip
          export LDGOLD=clang-crDroid/bin/aarch64-linux-gnu-ld.gold
          export LLVM_AR=clang-crDroid/bin/llvm-ar
          export LLVM_DIS=clang-crDroid/bin/llvm-dis
          export CCACHE=1
          rm -rf kernel/out
          cd kernel
          config_path="sunfish_defconfig"
          make -j$(nproc) ARCH=$ARCH SUBARCH=$SUBARCH CC=$CC \
            CROSS_COMPILE=$CROSS_COMPILE \
            CROSS_COMPILE_ARM32=$CROSS_COMPILE_ARM32 \
            DTC_EXT=dtc \
            "$config_path" O=out
          echo "Compilation started..."
          make -j$(nproc) ARCH=$ARCH SUBARCH=$SUBARCH CC=$CC \
            CROSS_COMPILE=$CROSS_COMPILE \
            CROSS_COMPILE_ARM32=$CROSS_COMPILE_ARM32 \
            DTC_EXT=dtc \
            O=out
          cd ..

      - name: Clone AnyKernel3
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git

      - name: Copy kernel Image to AnyKernel3
        run: |
          cp kernel/out/arch/arm64/boot/Image AnyKernel3/

      - name: Create AnyKernel3 flashable zip
        run: |
          cd AnyKernel3
          zip -r9 ../AnyKernel3-flashable.zip ./*
          cd ..

      - name: Upload AnyKernel3 flashable zip
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3-flashable
          path: AnyKernel3-flashable.zip

      - name: Upload kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: kernel/out/arch/arm64/boot/Image