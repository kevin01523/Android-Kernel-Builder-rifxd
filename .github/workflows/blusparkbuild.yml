name: Android Kernel Build (AOSP toolchains, Sunfish blu_spark)

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            bc \
            bison \
            curl \
            ca-certificates \
            cpio \
            flex \
            git \
            zip \
            lz4 \
            libssl-dev \
            libtfm-dev \
            libfl-dev \
            libncurses-dev \
            libncurses6 \
            libncursesw6 \
            python3 \
            python3-venv \
            libarchive-tools \
            rsync \
            unzip \
            wget \
            zstd \
            binutils-arm-linux-gnueabihf \
            gcc-aarch64-linux-gnu \
            gcc-arm-linux-gnueabi \
            device-tree-compiler \
            llvm \
            ccache \
            dwarves \
            lld \
            llvm-dev \
            gnupg \
            gnutls-bin \
            gperf \
            imagemagick \
            libsdl1.2-dev \
            libxml2 \
            pngcrush \
            protobuf-compiler \
            python3-protobuf \
            schedtool \
            squashfs-tools \
            xsltproc \
            ftp \
            lftp \
            clang \
            tar \
            gzip \
            bzip2 \
            rar \
            unrar \
            checkinstall \
            libncursesw5-dev \
            libsqlite3-dev \
            tk-dev \
            libgdbm-dev \
            libc6-dev \
            libbz2-dev \
            libffi-dev

      - name: Add swap space
        run: |
          sudo fallocate -l 4G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          free -h

      - name: Download AOSP toolchains (Android 13)
        run: |
          set -e
          mkdir -p aosp-tools
          cd aosp-tools
          echo "Downloading official Android 13 clang (r450784d, android13-qpr3-s9-release)..."
          wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android13-qpr3-s9-release/clang-r450784d.tar.gz
          echo "Extracting clang..."
          mkdir clang-r450784d
          tar -xzf clang-r450784d.tar.gz -C clang-r450784d
          echo "Downloading AOSP GCC 4.9 for aarch64 (commit 606f80986096476912e04e5c2913685a8f2c3b65)..."
          wget -q https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/606f80986096476912e04e5c2913685a8f2c3b65.tar.gz -O aarch64-linux-android-4.9.tar.gz
          echo "Extracting aarch64 GCC..."
          mkdir aarch64-linux-android-4.9
          tar -xzf aarch64-linux-android-4.9.tar.gz -C aarch64-linux-android-4.9
          echo "Downloading AOSP GCC 4.9 for arm (commit b0c6a654327ca8796bed1e61dffcf523d04dceaa)..."
          wget -q https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/b0c6a654327ca8796bed1e61dffcf523d04dceaa.tar.gz -O arm-linux-androideabi-4.9.tar.gz
          echo "Extracting arm GCC..."
          mkdir arm-linux-androideabi-4.9
          tar -xzf arm-linux-androideabi-4.9.tar.gz -C arm-linux-androideabi-4.9
          echo "Toolchain downloads and extraction complete."
          cd ..

      - name: Fix binutils symlinks
        run: |
          # Symlink all the expected binutils for kernel cross-builds (aarch64-linux-gnu-* to aarch64-linux-android-*)
          AARCH64_BIN="${PWD}/aosp-tools/aarch64-linux-android-4.9/bin"
          cd "$AARCH64_BIN"
          for tool in ar nm objcopy objdump ranlib strip readelf; do
              [ -e "aarch64-linux-gnu-$tool" ] || ln -s "aarch64-linux-android-$tool" "aarch64-linux-gnu-$tool"
          done
          cd -
          # Also symlink arm-linux-gnueabi-* to arm-linux-androideabi-* for 32-bit tools
          ARM32_BIN="${PWD}/aosp-tools/arm-linux-androideabi-4.9/bin"
          cd "$ARM32_BIN"
          for tool in ar nm objcopy objdump ranlib strip readelf; do
              [ -e "arm-linux-gnueabi-$tool" ] || ln -s "arm-linux-androideabi-$tool" "arm-linux-gnueabi-$tool"
          done
          cd -

      - name: Download and extract wahoo-kernel-tools
        run: |
          mkdir -p toolchains
          wget -O /tmp/wahoo-kernel-tools.zip https://xdaforums.com/attachments/wahoo-kernel-tools-zip.4312566/
          unzip /tmp/wahoo-kernel-tools.zip -d toolchains

      - name: Clone kernel source
        run: |
          git clone --depth=1 --branch blu_spark-13 https://github.com/kevin01523/pxl4a kernel

      - name: Set up git identity for cherry-pick
        run: |
          cd kernel
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          cd ..

      - name: Cherry-pick proton_zf6 commit 68acd6966ac98c4610813cec759afb33015d2329
        run: |
          cd kernel
          git remote add proton_zf6 https://github.com/kdrag0n/proton_zf6.git
          git fetch proton_zf6 68acd6966ac98c4610813cec759afb33015d2329
          git cherry-pick 68acd6966ac98c4610813cec759afb33015d2329
          cd ..

      - name: Build Kernel
        run: |
          set -e
          export KERNEL_DIR="${PWD}/aosp-tools"
          export PATH="${KERNEL_DIR}/clang-r450784d/bin:${PATH}"
          export PATH="${KERNEL_DIR}/aarch64-linux-android-4.9/bin:${PATH}"
          export PATH="${KERNEL_DIR}/arm-linux-androideabi-4.9/bin:${PATH}"
          export LD_LIBRARY_PATH="${KERNEL_DIR}/clang-r450784d/lib64:${LD_LIBRARY_PATH}"
          export LD=ld.lld
          export CROSS_COMPILE="${KERNEL_DIR}/aarch64-linux-android-4.9/bin/aarch64-linux-gnu-"
          export CROSS_COMPILE_ARM32="${KERNEL_DIR}/arm-linux-androideabi-4.9/bin/arm-linux-gnueabi-"
          export KBUILD_COMPILER_STRING=$(/home/semaphore/clang/bin/clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')
          DEFCONFIG="blu_spark_defconfig"
          rm -rf kernel/out
          cd kernel
          # Defconfig step
          make O=../out \
            CC=clang \
            ARCH=arm64 \
            CROSS_COMPILE=${CROSS_COMPILE} \
            CROSS_COMPILE_ARM32=${CROSS_COMPILE_ARM32} \
            LLVM=1 \
            LLVM_IAS=1 \
            ${DEFCONFIG}
          # Build step (parallel)
          make O=../out \
            CC=clang \
            ARCH=arm64 \
            CROSS_COMPILE=${CROSS_COMPILE} \
            CROSS_COMPILE_ARM32=${CROSS_COMPILE_ARM32} \
            LLVM=1 \
            LLVM_IAS=1 \
            LD=${LD} \
            NM=llvm-nm \
            OBJCOPY=llvm-objcopy \
            -j"$(nproc)"
          # Compress kernel image as lz4
          lz4 -9 ../out/arch/arm64/boot/Image ../out/arch/arm64/boot/Image.lz4
          cd ..
          pwd

      - name: Clone AnyKernel3
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git

      - name: Copy lz4 Image to AnyKernel3
        run: |
          cp out/arch/arm64/boot/Image.lz4 AnyKernel3/

      - name: Create AnyKernel3 flashable zip
        run: |
          cd AnyKernel3
          zip -r9 ../AnyKernel3-flashable.zip ./*
          cd ..

      - name: Upload AnyKernel3 flashable zip
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3-flashable
          path: AnyKernel3-flashable.zip

      - name: Upload lz4 kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image-lz4
          path: out/arch/arm64/boot/Image.lz4